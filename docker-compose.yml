

services:


  gateway:
    env_file:
      - ./.env
    build: ./gateway
    container_name: gateway
    ports:
      - "8000:8000"
    networks:
      - backend
    volumes:
      - ./host-logs/gateway:/app/logs

  admin:
    env_file:
      - ./.env
    build: ./admin
    container_name: admin
    ports:
      - "8003:8003"
    networks:
      - backend

  alert:
    env_file:
      - ./.env
    build: ./alert
    container_name: alert
    ports:
      - "8005:8005"
    networks:
      - backend


  order:
    env_file:
      - ./.env
    build: ./order
    container_name: order
    ports:
      - "8004:8004"
    networks:
      - backend

  product:
    env_file:
      - ./.env
    build: ./product
    environment:
      MONGODB_URI: "mongodb://${DB_USER}:${DB_PASSWORD}@${MONGO_URL}:${MONGO_PORT}/${MONGO_DB}?authSource=admin"
    container_name: product
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "8001:8001"
    networks:
      - backend

    volumes:
      - ./host-logs/product:/app/logs
  #  mongodb_product:
#    env_file:
#      - ./.env
#    image: mongo:6.0
#    container_name: mongodb_product
#    restart: always
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: ${ROOT_DB_USER_PRODUCT}
#      MONGO_INITDB_ROOT_PASSWORD: ${ROOT_DB_PASSWORD_PRODUCT}
#      MONGO_INITDB_DATABASE: product
#    ports:
#      - "27018:27017"
#    volumes:
#      - mongodb_product:/data/db
#      - ./mongo-init/product:/docker-entrypoint-initdb.d
#      - ./data:/data
#    healthcheck:
#      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
#      interval: 5s
#      timeout: 2s
#      retries: 5
#    networks:
#      - backend

#  mongodb_brand:
#    image: mongo:6.0
#    env_file:
#      - ./.env
#    container_name: mongodb_brand
#    restart: always
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: ${ROOT_DB_USER_BRAND}
#      MONGO_INITDB_ROOT_PASSWORD: ${ROOT_DB_PASSWORD_BRAND}
#      MONGO_INITDB_DATABASE: brand
#    ports:
#      - "27020:27017"
#    volumes:
#      - mongodb_brand:/data/db
#      - ./mongo-init/brand:/docker-entrypoint-initdb.d
#      - ./data:/data
#    healthcheck:
#      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
#      interval: 5s
#      timeout: 2s
#      retries: 5
#    networks:
#      - backend

#  mongodb_order:
#    image: mongo:6.0
#    container_name: mongodb_order
#    restart: always
#    env_file: ./.env
#    environment:
#      - MONGO_INITDB_ROOT_USERNAME=${DB_USER}
#      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
#      - MONGO_INITDB_DATABASE=order
#
#    ports:
#      - "27019:27017"
#    volumes:
#      - mongodb_order:/data/db
#      - ./mongo-init/order:/docker-entrypoint-initdb.d
#      - ./data:/data
#    networks:
#      - backend
#
  cart:
    build: ./cart
    container_name: cart
    env_file:
      - ./.env                                       # ← load .env here
    environment:
      MONGODB_URI: "mongodb://${DB_USER}:${DB_PASSWORD}@${MONGO_URL}:${MONGO_PORT}/${MONGO_DB}?authSource=admin"

    networks:
      - backend
#
#  mongodb_cart:
#    image: mongo:6.0
#    container_name: mongodb_cart
#    restart: always
#    env_file: ./.env                                       # ← load .env here too
#    environment:
#      - MONGO_INITDB_ROOT_USERNAME=${DB_USER}
#      - MONGO_INITDB_ROOT_PASSWORD=${DB_PASSWORD}
#      - MONGO_INITDB_DATABASE=admin
#    ports:
#      - "27017:27017"
#    networks:
#      - backend
#
  # === promotion MongoDB 및 서비스 추가 ===
#  mongodb_promotion:
#    image: mongo:6.0
#    container_name: mongodb_promotion
#    restart: always
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: ${DB_USER}
#      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD}
#      MONGO_INITDB_DATABASE: promotion
#    ports:
#      - "27021:27017"
#    volumes:
#      - mongodb_promotion:/data/db
#      - ./mongo-init/promotion:/docker-entrypoint-initdb.d
#      - ./data:/data
#    networks:
#      - backend

  promotion:
    env_file:
      - ./.env
    build: ./promotion
    container_name: promotion
    ports:
      - "8006:8006"
    networks:
      - backend


  recommend:
    env_file:
      - ./.env
    build: ./recommend
    container_name: recommend
    restart: always
    ports:
      - "8007:8007"
    networks:
      - backend
    depends_on:
      - product
    volumes:
      - ./data/product.json:/data/product.json
      - ./data/brand.json:/data/brand.json

volumes:
  mysql:
  mongodb_product:
  mongodb_order:
  mongodb_brand:
  mongodb_promotion:
  mysql_alert:
  mysql_user_data:
networks:
  backend:
    driver: bridge

# docker-compose.yml (루트에 위치)
